const merge = require("deepmerge");
const gh = require("hast-util-sanitize/lib/github");
const info = require("property-information");
const svgElementAttributes = require("svg-element-attributes");
const ariaAttributes = require("aria-attributes").map(
  (attr) => info.find(info.html, attr).property
);
const htmlElementAttributes = require("html-element-attributes");
const fs = require("fs");

let schema = gh;
schema.tagNames = [
  "a",
  "abbr",
  "acronym",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "bdi",
  "bdo",
  "big",
  "blink",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "center",
  "cite",
  "code",
  "col",
  "colgroup",
  "content",
  "data",
  "datalist",
  "dd",
  "decorator",
  "del",
  "details",
  "dfn",
  "dir",
  "div",
  "dl",
  "dt",
  "element",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "font",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meter",
  "nav",
  "nobr",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "section",
  "select",
  "shadow",
  "small",
  "source",
  "spacer",
  "span",
  "strike",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "track",
  "tt",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  "svg",
  "a",
  "altglyph",
  "altglyphdef",
  "altglyphitem",
  "animatecolor",
  "animatemotion",
  "animatetransform",
  "audio",
  "canvas",
  "circle",
  "clippath",
  "defs",
  "desc",
  "ellipse",
  "filter",
  "font",
  "g",
  "glyph",
  "glyphref",
  "hkern",
  "image",
  "line",
  "lineargradient",
  "marker",
  "mask",
  "metadata",
  "mpath",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialgradient",
  "rect",
  "stop",
  "style",
  "switch",
  "symbol",
  "text",
  "textpath",
  "title",
  "tref",
  "tspan",
  "video",
  "view",
  "vkern",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "math",
  "menclose",
  "merror",
  "mfenced",
  "mfrac",
  "mglyph",
  "mi",
  "mlabeledtr",
  "mmultiscripts",
  "mn",
  "mo",
  "mover",
  "mpadded",
  "mphantom",
  "mroot",
  "mrow",
  "ms",
  "mspace",
  "msqrt",
  "mstyle",
  "msub",
  "msup",
  "msubsup",
  "mtable",
  "mtd",
  "mtext",
  "mtr",
  "munder",
  "munderover",
];

schema = merge(schema, {
  attributes: {
    "*": Array.from(
      new Set(
        [
          "className",
          "data*",
          "about",
          "content",
          "datatype",
          "id",
          "lang",
          "property",
          "rel",
          "resource",
          "rev",
          "tabindex",
          "typeof",
        ].concat(ariaAttributes)
      )
    ),
  },
});

schema.strip = ["script", "object", "applet", "foreignObject"];
for (const element of Object.keys(svgElementAttributes)) {
  if (element !== "*" && schema.strip.indexOf(element) !== -1) {
    schema.attributes[element] = svgElementAttributes[element].map(
      (attr) => info.find(info.html, attr).property
    );
  }
}
for (const element of Object.keys(htmlElementAttributes)) {
  if (element !== "*" && schema.strip.indexOf(element) !== -1) {
    schema.attributes[element] = htmlElementAttributes[element].map(
      (attr) => info.find(info.html, attr).property
    );
  }
}

schema.tagNames = Array.from(new Set(schema.tagNames));

module.exports = schema;

fs.writeFileSync(
  "hast-annotations-match/full-html-schema.json",
  JSON.stringify(schema, null, 4)
);
